{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Deepika157/PROJECTS/blob/main/Project_1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "SbHnQBqAjHA0"
      },
      "outputs": [],
      "source": [
        "!pip install opencv-python-headless==4.1.2.30  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "-DtvaAhfreJa"
      },
      "outputs": [],
      "source": [
        "#installing dependencies\n",
        "!pip install easyocr #extract text or characters from given image\n",
        "!pip install imutils #contains series of opencv functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "gM9Mks2crr_4"
      },
      "outputs": [],
      "source": [
        "#importing dependencies\n",
        "import cv2 #computer vision \n",
        "from matplotlib import pyplot as plt #for plotting and visualizing image\n",
        "import numpy as np \n",
        "import imutils \n",
        "import easyocr "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "v-uP2YOfrzSG"
      },
      "outputs": [],
      "source": [
        "# read in an image and GRAYSCALE\n",
        "img = cv2.imread('/content/new img.jpg') #reading an image by passing path of initial image\n",
        "gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #converting color of image from single color to diff(i.e. GRAY color)\n",
        "plt.imshow(cv2.cvtColor(gray, cv2.COLOR_BGR2RGB)) #display the img after grayscaling"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "vWgWQmBbsCkI"
      },
      "outputs": [],
      "source": [
        "#applying filter and edges for localization\n",
        "bfilter = cv2.bilateralFilter(gray, 11, 17, 17) #Noise reduction\n",
        "edged = cv2.Canny(bfilter, 30, 200) #Edge detection\n",
        "plt.imshow(cv2.cvtColor(edged, cv2.COLOR_BGR2RGB))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "buDwKTNHsGwU"
      },
      "outputs": [],
      "source": [
        "#finding contours - detecting polygons within image\n",
        "keypoints = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE) \n",
        "contours = imutils.grab_contours(keypoints)\n",
        "contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "NkqSW6iesRPH"
      },
      "outputs": [],
      "source": [
        "location = None\n",
        "for contour in contours:\n",
        "    approx = cv2.approxPolyDP(contour, 10, True)\n",
        "    if len(approx) == 4:\n",
        "        location = approx\n",
        "        break"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "vabkhJzrsTke"
      },
      "outputs": [],
      "source": [
        "location"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "BAbFuc9fsXmr"
      },
      "outputs": [],
      "source": [
        "#applying mask on image\n",
        "mask = np.zeros(gray.shape, np.uint8) #filling blank image with a 0 (black)\n",
        "new_image = cv2.drawContours(mask, [location], 0,255, -1) \n",
        "new_image = cv2.bitwise_and(img, img, mask=mask)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "lRe0TS_6sfaT"
      },
      "outputs": [],
      "source": [
        "plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_BGR2RGB))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "m-Z4R9Hfsl1t"
      },
      "outputs": [],
      "source": [
        "(x,y) = np.where(mask==255) #set white pixels where mask is true(i.e. white)\n",
        "(x1, y1) = (np.min(x), np.min(y)) #finding minimum point\n",
        "(x2, y2) = (np.max(x), np.max(y)) # finding maximum points\n",
        "cropped_image = gray[x1:x2+1, y1:y2+1] # to give buffer to img"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "vNHxrzajsyln"
      },
      "outputs": [],
      "source": [
        "plt.imshow(cv2.cvtColor(cropped_image, cv2.COLOR_BGR2RGB))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "W18YgAbrs4Uw"
      },
      "outputs": [],
      "source": [
        "#use easyocr to read text\n",
        "reader = easyocr.Reader(['en'])\n",
        "result = reader.readtext(cropped_image)\n",
        "result"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "RDDrvlfktEmG"
      },
      "outputs": [],
      "source": [
        "#render result\n",
        "text = result[0][-2]\n",
        "font = cv2.FONT_HERSHEY_SIMPLEX\n",
        "res = cv2.putText(img, text=text, org=(approx[0][0][0], approx[1][0][1]+60), fontFace=font, fontScale=1, color=(0,255,0), thickness=2, lineType=cv2.LINE_AA)\n",
        "res = cv2.rectangle(img, tuple(approx[0][0]), tuple(approx[2][0]), (0,255,0),3)\n",
        "plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "C2wIntshBWwU"
      },
      "outputs": [],
      "source": [
        "name=str(text)\n",
        "name"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "cnEqaW93Ikqu"
      },
      "outputs": [],
      "source": [
        "#applying some condition for toll tax\n",
        "if name.startswith('UK'): #vehicle belongs to same state\n",
        "    print('same state')\n",
        "    tolltax=100\n",
        "    print('your tax is:',tolltax)\n",
        "    \n",
        "else:\n",
        "     print('other state')\n",
        "     tolltax=1000\n",
        "     print('your tax is:',tolltax)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "LAib_QgwJeMz",
        "outputId": "7e0da80f-2eb0-4c7f-83ec-77122c7615c5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\tMAIN MENU\n",
            "\t1. ACCOUNT DETAILS\n",
            "\t2. SHOW DETAILS\n",
            "\t3. WITHDRAW AMOUNT\n",
            "\t4. TOTAL BALANCE \n",
            "\t5. EXIT\n",
            "\tMAIN MENU\n",
            "\t1. ACCOUNT DETAILS\n",
            "\t2. SHOW DETAILS\n",
            "\t3. WITHDRAW AMOUNT\n",
            "\t4. TOTAL BALANCE \n",
            "\t5. EXIT\n",
            "Account Number :  123456\n",
            "Account Holder Name :  deepika\n",
            "Balance :  3500.0\n",
            "\tMAIN MENU\n",
            "\t1. ACCOUNT DETAILS\n",
            "\t2. SHOW DETAILS\n",
            "\t3. WITHDRAW AMOUNT\n",
            "\t4. TOTAL BALANCE \n",
            "\t5. EXIT\n",
            "tolltax deducted\n",
            "\tMAIN MENU\n",
            "\t1. ACCOUNT DETAILS\n",
            "\t2. SHOW DETAILS\n",
            "\t3. WITHDRAW AMOUNT\n",
            "\t4. TOTAL BALANCE \n",
            "\t5. EXIT\n",
            "balance after paying tax: 2500.0\n",
            "\tMAIN MENU\n",
            "\t1. ACCOUNT DETAILS\n",
            "\t2. SHOW DETAILS\n",
            "\t3. WITHDRAW AMOUNT\n",
            "\t4. TOTAL BALANCE \n",
            "\t5. EXIT\n",
            "you have successfully payed the tax:\n",
            "\tMAIN MENU\n",
            "\t1. ACCOUNT DETAILS\n",
            "\t2. SHOW DETAILS\n",
            "\t3. WITHDRAW AMOUNT\n",
            "\t4. TOTAL BALANCE \n",
            "\t5. EXIT\n",
            "you have successfully payed the tax:\n",
            "\tMAIN MENU\n",
            "\t1. ACCOUNT DETAILS\n",
            "\t2. SHOW DETAILS\n",
            "\t3. WITHDRAW AMOUNT\n",
            "\t4. TOTAL BALANCE \n",
            "\t5. EXIT\n"
          ]
        }
      ],
      "source": [
        "#import pickle #used for serializing and de-serializing a Python object structure\n",
        "#import os import pathlib \n",
        "\n",
        "class account:\n",
        "   accNo = 0\n",
        "  \n",
        "   def AccountDetails(self):\n",
        "        self.accNo= int(input(\"Enter the account no : \"))\n",
        "        self.name = input(\"Enter the account holder name : \")\n",
        "        self.balance = float(input(\"Enter the balance:\"))\n",
        "\n",
        "   def showAccount(self):\n",
        "        print(\"Account Number : \",self.accNo)\n",
        "        print(\"Account Holder Name : \", self.name)\n",
        "        print(\"Balance : \",self.balance)\n",
        "\n",
        "   def withdrawAmount(self,tolltax):\n",
        "        self.balance -= tolltax\n",
        "        print(\"tolltax deducted\")\n",
        "\n",
        "   def totbalance(self):\n",
        "        print(\"balance after paying tax:\", self.balance)\n",
        "\n",
        "obj = account() #creating object for class bank\n",
        "\n",
        "\n",
        "\n",
        "#ch= input(\"enter your choice:\")\n",
        "ch= ' '\n",
        "while ch != 5:\n",
        "    #system(\"cls\");\n",
        "    print(\"\\tMAIN MENU\")\n",
        "    print(\"\\t1. ACCOUNT DETAILS\")\n",
        "    print(\"\\t2. SHOW DETAILS\")\n",
        "    print(\"\\t3. WITHDRAW AMOUNT\")\n",
        "    print(\"\\t4. TOTAL BALANCE \")\n",
        "    print(\"\\t5. EXIT\")\n",
        "   \n",
        "    ch = input()\n",
        "    #system(\"cls\");\n",
        "    \n",
        "    if ch == '1':\n",
        "       obj.AccountDetails()\n",
        "\n",
        "    elif ch =='2':\n",
        "       obj.showAccount()\n",
        "\n",
        "    elif ch == '3':\n",
        "      obj.withdrawAmount(tolltax)\n",
        "\n",
        "    elif ch == '4':\n",
        "      obj.totbalance()\n",
        "       \n",
        "    elif ch == '5':\n",
        "      print(\"you have successfully payed the tax:\")\n",
        "\n",
        "    else :\n",
        "     print(\"invalid choice:\")\n",
        "\n",
        "  \n",
        "\n",
        "      \n",
        "    "
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Project-1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyObhZuB78CducvZmzqn3Umu",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
